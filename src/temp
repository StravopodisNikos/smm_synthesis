#include <ros/ros.h>
#include <ros/package.h>
#include <urdf/model.h>
#include <kdl_parser/kdl_parser.hpp>
#include <kdl/tree.hpp>
#include <kdl/frames.hpp>
#include <Eigen/Dense>
#include <yaml-cpp/yaml.h>
#include <fstream>
#include <map>
#include <string>
#include <vector>

Eigen::Matrix4d KDLFrameToEigen(const KDL::Frame& frame) {
    Eigen::Matrix4d mat = Eigen::Matrix4d::Identity();
    for (int i = 0; i < 3; ++i) {
        mat.block<1,3>(i,0) = Eigen::Vector3d(frame.M(i,0), frame.M(i,1), frame.M(i,2)).transpose();
    }
    mat.block<3,1>(0,3) = Eigen::Vector3d(frame.p.x(), frame.p.y(), frame.p.z());
    return mat;
}

int main(int argc, char** argv) {
    ros::init(argc, argv, "passive_frame_extractor_kdl");
    ros::NodeHandle nh("~");  // Private NodeHandle for private parameters
    ros::NodeHandle nh_global("/");  // global root master file

    // Load output filename
    std::string output_filename;
    if (!nh.getParam("output_file", output_filename)) {
        ROS_ERROR("No output_file parameter provided.");
        return -1;
    }

    // Load structure parameters
    int s2, s3, s5, s6;
    if (!nh_global.getParam("s2", s2) ||
        !nh_global.getParam("s3", s3) ||
        !nh_global.getParam("s5", s5) ||
        !nh_global.getParam("s6", s6)) {
        ROS_ERROR("Missing one or more structure parameters (s2, s3, s5, s6)");
        return -1;
    }

    // Determine which frames to extract
    std::map<std::string, bool> frame_selection = {
        {"metalink_1_pseudo1_b", s2 != 9},
        {"metalink_1_pseudo2_b", s3 != 9},
        {"metalink_2_pseudo1_b", s5 != 9},
        {"metalink_2_pseudo2_b", s6 != 9}
    };

    // Load URDF and create KDL tree
    urdf::Model model;
    if (!model.initParam("robot_description")) {
        ROS_ERROR("Failed to load robot_description");
        return -1;
    }

    KDL::Tree kdl_tree;
    if (!kdl_parser::treeFromUrdfModel(model, kdl_tree)) {
        ROS_ERROR("Failed to construct KDL tree");
        return -1;
    }

    // Map from frame names to transforms
    std::map<std::string, Eigen::Matrix4d> frame_map;
    for (const auto& segment : kdl_tree.getSegments()) {
        const std::string& name = segment.second.segment.getName();
        if (frame_selection.count(name) && frame_selection[name]) {
            KDL::Frame frame = segment.second.segment.pose(0.0);  // Zero joint pos
            Eigen::Matrix4d mat = KDLFrameToEigen(frame);
            frame_map[name] = mat;
        }
    }

    // Print to terminal
    for (const auto& entry : frame_map) {
        std::cout << "\nFrame: " << entry.first << "\n" << entry.second << "\n";
    }

    // Save to YAML
    std::string save_path = ros::package::getPath("smm_synthesis") + "/config/yaml/" + output_filename;
    YAML::Emitter out;
    out << YAML::BeginMap;
    for (const auto& entry : frame_map) {
        out << YAML::Key << entry.first << YAML::Value << YAML::BeginSeq;
        for (int i = 0; i < 4; ++i)
            for (int j = 0; j < 4; ++j)
                out << entry.second(i,j);
        out << YAML::EndSeq;
    }
    out << YAML::EndMap;

    std::ofstream fout(save_path);
    fout << out.c_str();
    fout.close();

    ROS_INFO_STREAM("Passive frames saved to: " << save_path);
    return 0;
}
